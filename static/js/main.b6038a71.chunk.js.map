{"version":3,"sources":["components/TodoList/TodoList.tsx","components/API/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","listOfTodos","callbackForUserSelect","useState","currentFilter","setCurrentFilter","filterBySelect","setFilterBySelect","className","type","onChange","event","target","value","list","filter","el","completed","sorter","map","singleTodo","title","includes","classNames","readOnly","checked","onClick","userId","id","request","url","fetch","then","res","json","getTodos","a","result","getSingleUser","CurrentUser","clearUser","currentUser","setCurrentUser","useEffect","singleUser","name","email","phone","App","selectedUserId","setSelectedUserId","currentTodos","setCurrentTodos","todosGetter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b6038a71.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport './TodoList.scss';\n\ninterface Props {\n  listOfTodos : Todo[],\n  callbackForUserSelect: (id : number) => void;\n}\n\nexport const TodoList: React.FC<Props> = (\n  { listOfTodos, callbackForUserSelect },\n) => {\n  const [currentFilter, setCurrentFilter] = useState('');\n  const [filterBySelect, setFilterBySelect] = useState('all');\n\n  function sorter(list : Todo[]) {\n    switch (filterBySelect) {\n      case 'completed': {\n        return list.filter(el => el.completed === true);\n      }\n\n      case 'active': {\n        return list.filter(el => el.completed === false);\n      }\n\n      default: {\n        return list;\n      }\n    }\n  }\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Filter todos:</h2>\n      <label>\n        <p>filter</p>\n        <input\n          type=\"text\"\n          onChange={(event) => {\n            setCurrentFilter(event.target.value);\n          }}\n        />\n      </label>\n      <label>\n        <p>\n          Status\n        </p>\n        <select\n          onChange={(event) => {\n            setFilterBySelect(event.target.value);\n          }}\n        >\n          <option value=\"all\">\n            all\n          </option>\n          <option value=\"completed\">\n            completed\n          </option>\n          <option value=\"active\">\n            active\n          </option>\n        </select>\n      </label>\n\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {sorter(listOfTodos).map(singleTodo => (\n            singleTodo.title.includes(currentFilter) && (\n              <li\n                key={singleTodo.id}\n                className={\n                  classNames(\n                    'TodoList__item',\n                    { 'TodoList__item--checked': singleTodo.completed },\n                    { 'TodoList__item--unchecked': !singleTodo.completed },\n                  )\n                }\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    readOnly\n                    checked={singleTodo.completed}\n                  />\n                  <p>{singleTodo.title}</p>\n                </label>\n                <button\n                  className=\"\n              TodoList__user-button\n              TodoList__user-button--selected\n              button\n            \"\n                  type=\"button\"\n                  onClick={() => {\n                    callbackForUserSelect(singleTodo.userId);\n                  }}\n                >\n                  {`User ${singleTodo.userId}`}\n                </button>\n              </li>\n            )\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport function request(url : string) {\n  return fetch(`${BASE_URL}${url}`)\n    .then(res => res.json());\n}\n\nexport async function getTodos() {\n  const result = await (request('/todos'));\n\n  return result;\n}\n\nexport async function getUsers() {\n  const result = await (request('/users'));\n\n  return result;\n}\n\nexport async function getSingleUser(id:number) {\n  const result = await (request(`/users/${id}`));\n\n  return result;\n}\n","import React, { useEffect, useState } from 'react';\nimport { getSingleUser } from '../API/api';\nimport './CurrentUser.scss';\n\ninterface Props {\n  userId: number;\n  clearUser: (arg0 : number) => void;\n}\n\nexport const CurrentUser: React.FC<Props> = ({ userId, clearUser }) => {\n  const [currentUser, setCurrentUser] = useState<User>();\n\n  async function singleUser(id : number) {\n    const result = await getSingleUser(id);\n\n    setCurrentUser(result);\n  }\n\n  useEffect(() => {\n    singleUser(userId);\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>\n          {`Selected user: ${currentUser?.id}`}\n        </span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\">{currentUser?.name}</h3>\n      <p className=\"CurrentUser__email\">{currentUser?.email}</p>\n      <p className=\"CurrentUser__phone\">{currentUser?.phone}</p>\n      <button\n        type=\"button\"\n        onClick={() => clearUser(0)}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './components/API/api';\n\nconst App: React.FC = () => {\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n\n  const [currentTodos, setCurrentTodos] = useState<Todo[]>([]);\n\n  async function todosGetter() {\n    const result = await getTodos();\n\n    setCurrentTodos(result);\n  }\n\n  useEffect(() => {\n    todosGetter();\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          listOfTodos={currentTodos}\n          callbackForUserSelect={setSelectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              clearUser={setSelectedUserId}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}